name: build-ami
on:
  pull_request:
    branches: [main]
    types: [closed]

jobs:
  build-ami:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true

    steps:
      - uses: actions/checkout@v3
      - name: Setup `packer`
        uses: hashicorp/setup-packer@main
        id: setup
        with:
          version: "1.8.3" # or `latest`

      - name: Zip the repo code
        run: zip -r webapp.zip .

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.REGION }}

      - name: Run `packer init`
        id: init
        run: "packer init ./packer/packer.pkr.hcl"

      - name: Build AMI with Packer
        run: |
          packer build \
          -var "region=${{ vars.REGION }}" \
          -var "ssh_user=${{ vars.SSH_USER }}" \
          -var "HOST=${{ vars.HOST }}" \
          -var "USERNAME=${{ secrets.USERNAME }}" \
          -var "PASSWORD=${{ secrets.PASSWORD }}" \
          -var "DB_NAME=${{ vars.DB_NAME }}" \
          -var "DIALECT=${{ vars.DIALECT }}" \
          -var "PORT=${{ vars.PORT }}" \
          -var "NODE_ENV=${{ vars.NODE_ENV }}" \
          -var "account_to_share=${{ vars.ACCOUNT_TO_SHARE }}" \
          -var "instance_type=${{ vars.INSTANCE_TYPE }}" \
          -var "profile=${{ vars.PROFILE }}" \
          ./packer/packer.pkr.hcl

      - name: Configure AWS Credentials Action For GitHub Actions
        uses: aws-actions/configure-aws-credentials@v1
        with:
          # Demo credentials are used here by default
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
          aws-region: ${{ vars.REGION }}
      - name: Checking if ASG is up and running in demo environment
        run: |
          ASG_EXISTS=$(aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names "${{ vars.ASG_NAME }}" --query 'length(AutoScalingGroups)')
          if [ "$ASG_EXISTS" -eq 0 ]; then
            echo "Auto Scaling Group '${{ vars.ASG_NAME }}' does not exist."
            exit 1
          else
            echo "Auto Scaling Group '${{ vars.ASG_NAME }}' exists."
            # Setting Dev credentials for AWS 
            aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID_DEV }}"
            aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}"
            aws configure set region "${{ vars.REGION }}"
            aws sts get-caller-identity
            latest_ami=$(aws ec2 describe-images --owners ${{ var.DEV_ACCOUNT_ID }} --filters "Name=state,Values=available" "Name=architecture,Values=x86_64" "Name=root-device-type,Values=ebs" \
              --query "reverse(sort_by(Images, &CreationDate))[0].ImageId" --region ${{ vars.REGION }})
            echo "The latest AMI is: $latest_ami"
            # Setting Demo Credentials for AWS
            aws configure set aws_access_key_id "${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}"
            aws configure set aws_secret_access_key "${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}"
            aws configure set region "${{ vars.REGION }}"
            aws ec2 create-launch-template-version --launch-template-name asg-launch-template --source-version 1 --launch-template-data '{"ImageId":'$latest_ami'}'
            aws autoscaling start-instance-refresh --auto-scaling-group-name '${{ vars.ASG_NAME }}'
          fi